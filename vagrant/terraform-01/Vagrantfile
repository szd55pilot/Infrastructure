# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|

  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

    config.ssh.username = "vagrant"
    config.ssh.password = "vagrant"

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  # DP Orig  config.vm.box = "base"

    config.vm.box = "ubuntu17_desktop_v2"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080
 
  # config.vm.network "forwarded_port", guest: 22, host: 2222

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # config.vm.network "private_network", ip: "10.1.1.100"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.

    config.vm.network "private_network", ip: "10.1.1.100"

  # Set other network parameters
 
    config.vm.hostname = "terraform-01"

  # config.vm.define :ancible

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
    config.vm.provider "virtualbox" do |vb|

       vb.name = "terraform-01"
       vb.customize ["modifyvm", :id, "--cpus", 2]
       vb.customize ["modifyvm", :id, "--memory", "2048"]

#    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
#    vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
 
  #   # Display the VirtualBox GUI when booting the machine
 
       vb.gui = false

    end

  #
  #   # Customize the amount of memory on the VM:
  #    vb.memory = "1024"
  #  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL
 
    config.vm.provision "shell", inline: <<-SHELL

  # Set local timezone

       sudo timedatectl set-timezone Europe/London


  # Create local user: david

       sudo adduser --disabled-password --gecos "" david
       sudo echo 'david:tcs14159' | chpasswd 

  # Install jq (for JSON parsing) and curl.
  
        if [ -f /usr/bin/jq ]; then
           echo "jq already installed"
        else
           sudo apt install -y jq 2> /dev/null
        fi

  # Install curl.
  
        if [ -f /usr/bin/curl ]; then
           echo "curl already installed"
        else
           sudo apt install -y curl 2> /dev/null
        fi

  # Install terraform (latest version)

        if [ -f /usr/local/bin/terraform ]; then
			echo "terraform already installed"
		else
            # Is terraform downloaded

			if [ -f /tmp/terraform.zip ] ; then
				echo "Already downloaded"
		    else
				set -x
				echo "Downloading terraform"
				terraform_url=$(curl --silent -k https://releases.hashicorp.com/index.json | jq '{terraform}' | grep "linux.*64*" | sort -rV | head -1 | awk '{print $2}')
				echo "URL: $terraform_url"
				echo "curl --silent -ko /tmp/terraform.zip $terraform_url" > /tmp/get_tf.sh
				chmod +x /tmp/get_tf.sh
				cd /tmp
				sh ./get_tf.sh
			fi
			
			# Install terraform
			echo "Installing terraform and creating link"
			cd /tmp
			unzip terraform.zip
			sudo cp /tmp/terraform /usr/local/bin/terraform
			sudo ln -s /usr/local/bin/terraform /usr/local/bin/tf
			echo "terraform installed, use tf "
			set +x	
		fi

  # Install ruby.
  
		if [ -f /usr/bin/ruby ]; then
			echo "ruby already installed"
		else
			sudo apt install -y ruby 2> /dev/null
			echo "ruby installed"
		fi




    SHELL

end
